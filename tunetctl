#! /usr/bin/env python
# coding=utf-8

'''
tunetctl: TUNet CLI
Command line tool for Tsinghua University net login
by SyiMyuZya <syimyuzya@gmail.com>
'''

from __future__ import print_function, unicode_literals

import json
import os
import struct
import sys
import uuid

from getopt import gnu_getopt, GetoptError
from getpass import getpass
from hashlib import md5
from socket import socket, AF_INET, SOCK_DGRAM
from urllib import urlencode
from urllib2 import urlopen

try:
    import readline
except ImportError:
    pass



########

# hosts, ports and URLs

URL_HOST = 'https://net.tsinghua.edu.cn/'
URL_LOGIN = URL_HOST + '/do_login.php'
URL_INFO = URL_HOST + '/rad_user_info.php'



########

# net utilities

def check():
    '''
    check if this device is online.
    '''
    return urlopen(URL_LOGIN, b'action=check_online').read()


def get_status():
    '''
    Get verbosed online status of this device.
    '''
    return urlopen(URL_INFO).read().split(',')


def login(username, password):
    '''
    Login with username and password(encrypted).
    
    This function does not need the raw password.
    '''
    return urlopen(URL_LOGIN, urlencode({
        'action': 'login',
        'username': username,
        'password': '{MD5_HEX}' + password,
        'ac_id': '1'
    })).read()


def logout():
    '''
    Logout.
    '''
    return urlopen(URL_LOGIN, b'action=logout').read()



########

# interface

def show_version():
    print('TUNet Command Line Tool',
          'version 0.2.0',
          '',
          'by SyiMyuZya <syimyuzya@gmail.com>',
          sep='\n',
          file=sys.stderr)


def show_usage():
    show_version()
    print('',
          'Usage:',
          ' no option:',
          '  Show the current connect status of this device.',
          ' -l --login:',
          '  Login. Will prompt input for username and password.',
          ' -o --logout:',
          '  Logout.',
          ' -f <file> --file=<file>',
          '  Login with identity file <file>.',
          ' -s <file> --save=<file>',
          '  Login and save the identity info to <file>.',
          ' -d --default',
          '  Login with the default identity file.(~/.tunet)',
          ' -h --help',
          '  Print this help.',
          sep='\n',
          file=sys.stderr)
    return 0


def show_status(**opt):
    print('Current status:')
    status = get_status()
    if not status:
        print('  (offline)')
    else:
        items = [
                ('Username', None),
                ('Login time', None),
                ('Current time', None),
                ('Traffic in', None),
                ('Traffic out', None),
                (None, None),  # 5
                ('Traffic usage', None),
                (None, None),  # 7
                ('IP', None),
                ('(Unknown)', None),  # 9
                ('(Unknown)', None),  # 10
                ('Balance', lambda x: '{:.2f}'.format(float(x))),
                (None, None),  # 12
                ]
        print('  ', '\n  '.join(
            (item[0] if item[0] else '(Unknown)') + ': ' +
            (status[i] if not item[1] else item[1](status[i]))
            for i, item in enumerate(items)
            ), sep='')
    return 0


def do_login(**opt):
    if opt.has_key('file'):
        user = json.load(open(opt['file']))
    else:
        user = {}
        print('User: ', end='')
        user['name'] = raw_input()
        user['pass'] = md5(getpass()).hexdigest()
    if opt.has_key('save'):
        json.dump(user, open(opt['save'], 'w'))

    res = login(user['name'], user['pass'])
    print('Server response:', res)
    show_status()
    return 0 if res==b'Login is successful.' else 2


def do_logout(**opt):
    res = logout()
    print('Server response:', res)
    return 0 if res==b'Logout is successful.' else 2


def main():
    try:
        opts, args = gnu_getopt(sys.argv[1:], 'hlof:s:d',
                ['help', 'login', 'logout', 'file=', 'save=', 'default'])
        if len(args):
            raise GetoptError('unexpected argument '+args[0])
        actions = set()
        options = {}
        for opt in opts:
            if opt[0]=='-h' or opt[0]=='--help':
                actions.add('help')
            if opt[0]=='-l' or opt[0]=='--login':
                actions.add('login')
            if opt[0]=='-o' or opt[0]=='--logout':
                actions.add('logout')
            if opt[0]=='-f' or opt[0]=='--file':
                actions.add('login')
                options['file'] = opt[1]
            if opt[0]=='-s' or opt[0]=='--save':
                actions.add('login')
                options['save'] = opt[1]
            if opt[0]=='-d' or opt[0]=='--default':
                actions.add('login')
                options['file'] = os.path.join(os.path.expanduser('~'), '.tunet')

        if len(actions)==0:
            show_status()
        elif len(actions)>1:
            raise GetoptError('can not perform multiple actions: '
                    +repr(list(actions)))
        else:
            res = {'help':show_usage,
                   'login':do_login,
                   'logout':do_logout}[next(iter(actions))](**options)
            if res:
                sys.exit(res)

    except GetoptError as e:
        print('Err: '+e.msg,
              'Use -h(--help) for help',
              sep='\n', file=sys.stderr)
    except KeyboardInterrupt:
        print('Canceled', file=sys.stderr)


if __name__=='__main__':
    main()

# vim: ts=4 sw=4 et
