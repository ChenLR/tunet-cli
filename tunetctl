#! /usr/bin/env python
# coding=utf-8

'''
tunetctl: TUNet CLI
Command line tool for Tsinghua University net login
by SyiMyuZya <syimyuzya@gmail.com>
'''

from __future__ import print_function, unicode_literals

import json
import os
import struct
import sys
import uuid

from getopt import gnu_getopt, GetoptError
from getpass import getpass
from hashlib import md5
from socket import socket, AF_INET, SOCK_DGRAM
from urllib import urlencode
from urllib2 import urlopen

try:
    import readline
except ImportError:
    pass



########

# IPs, ports and URLs

TUNET_IP = '166.111.8.120'
TUNET_CHALLENGE_PORT = 3335
#URL_HOST = 'http://net.tsinghua.edu.cn'
URL_HOST = 'http://' + TUNET_IP
URL_LOGIN = URL_HOST + '/cgi-bin/do_login'
URL_LOGIN_WIN32 = URL_HOST+':3333/cgi-bin/do_login'
URL_LOGOUT = URL_HOST + '/cgi-bin/do_logout'



########

# net utilities

def check():
    '''
    Get online information of this connection.
    '''
    return urlopen(URL_LOGIN, b'action=check_online').read().split(',')


def login_web(username, password):
    '''
    Login with username and password(encrypted).
    
    This function does not need the raw password.
    '''
    return urlopen(URL_LOGIN, urlencode({
        'username':username,
        'password':password,
        'drop':'0',
        'type':'1',
        'n':'100'
    })).read().split(',')


def logout():
    '''
    Logout.
    '''
    return urlopen(URL_LOGOUT, b'').read()



########

# win32 net utilities

def win32_password(uid, password, key):
    return md5(b'%c'%(uid&0xff)+password.encode('ascii')+key).hexdigest()


def login_win32(username, password):
    '''
    Login with username and password(encrypted).
    Use the private protocol of TUNet.

    This function does not need the raw password.
    '''
    sock = socket(AF_INET, SOCK_DGRAM)
    sock.sendto(struct.pack(b'qq40s', -100, -1, username.encode('ascii')),
            (TUNET_IP, TUNET_CHALLENGE_PORT))
    sock.settimeout(10)
    res, addr = sock.recvfrom(48)
    print('challenge response received')

    if addr != (TUNET_IP, TUNET_CHALLENGE_PORT) or len(res)!=48:
        raise IOError('challenge response not received')
    res_type, res_uid, res_key, res_pad = struct.unpack(b'qQ16s16s', res)
    if res_pad!=b'\0'*16:
        raise IOError('invalid challenge response: {}'.format(type))
    if res_type!=-101:
        raise IOError('failed with code: {}'.format(type))

    mac = '%012x'%uuid.getnode()
    mac = ':'.join(mac[i:i+2] for i in range(0, 12, 2))
    return urlopen(URL_LOGIN_WIN32, urlencode({
        'username': username,
        'password': win32_password(res_uid, password, res_key),
        'n': '117',
        'type': '2',
        'drop': '0',
        'chap': '1',
        'mac': mac,
    })).read().split(',')



########

# interface

def show_version():
    print('TUNet Command Line Tool',
          'version 0.1.0',
          '',
          'by SyiMyuZya <syimyuzya@gmail.com>',
          sep='\n',
          file=sys.stderr)


def show_usage():
    show_version()
    print('',
          'Usage:',
          ' no option:',
          '  Show the current connect status of this device.',
          ' -l --login:',
          '  Login. Will prompt input for username and password.',
          ' -o --logout:',
          '  Logout.',
          ' -f <file> --file=<file>',
          '  Login with identity file <file>.',
          ' -s <file> --save=<file>',
          '  Login and save the identity info to <file>.',
          ' -d --default',
          '  Login with the default identity file.(~/.tunet)',
          ' -w --web',
          '  Use WEB protocol when logging in (insecure)',
          ' -h --help',
          '  Print this help.',
          sep='\n',
          file=sys.stderr)
    return 0


def show_status(**opt):
    print('Current status:')
    status = check()
    if len(status)==5:
        print('  User ID: '+status[0],
              '  User: '+status[1],
              '  Usage: '+status[2]+'B',
              '  (Unknown): '+status[3],
              '  Time: '+status[4]+'s',
              sep='\n')
    else:
        print('  Not logged in.')
    return 0


def do_login(**opt):
    if opt.has_key('file'):
        user = json.load(open(opt['file']))
    else:
        user = {}
        print('User: ', end='')
        user['name'] = raw_input()
        user['pass'] = md5(getpass()).hexdigest()
    if opt.has_key('save'):
        json.dump(user, open(opt['save'], 'w'))

    if 'protocol' in opt and opt['protocol']=='web':
        login = login_web
    else:
        login = login_win32
    res = login(user['name'], user['pass'])
    if len(res)==5:
        print('Server response:',
              '  User ID: '+res[0],
              '  (Unknown): '+res[1],
              '  Usage: '+res[2]+'B',
              '  (Unknown): '+res[3],
              '  (Unknown): '+res[4],
              sep='\n')
        show_status()
        return 0
    else:
        print('Server response:', ','.join(res))
        show_status()
        return 2


def do_logout(**opt):
    res = logout()
    print('Server response:', res)
    return int(res!='logout_ok')*2


def main():
    try:
        opts, args = gnu_getopt(sys.argv[1:], 'hlof:s:dw',
                ['help', 'login', 'logout', 'file=', 'save=', 'default', 'web'])
        if len(args):
            raise GetoptError('unexpected argument '+args[0])
        actions = set()
        options = {}
        for opt in opts:
            if opt[0]=='-h' or opt[0]=='--help':
                actions.add('help')
            if opt[0]=='-l' or opt[0]=='--login':
                actions.add('login')
            if opt[0]=='-o' or opt[0]=='--logout':
                actions.add('logout')
            if opt[0]=='-f' or opt[0]=='--file':
                actions.add('login')
                options['file'] = opt[1]
            if opt[0]=='-s' or opt[0]=='--save':
                actions.add('login')
                options['save'] = opt[1]
            if opt[0]=='-d' or opt[0]=='--default':
                actions.add('login')
                options['file'] = os.path.join(os.path.expanduser('~'), '.tunet')
            if opt[0]=='-w' or opt[0]=='--web':
                options['protocol'] = 'web'

        if len(actions)==0:
            show_status()
        elif len(actions)>1:
            raise GetoptError('can not perform multiple actions: '
                    +repr(list(actions)))
        else:
            res = {'help':show_usage,
                   'login':do_login,
                   'logout':do_logout}[next(iter(actions))](**options)
            if res:
                sys.exit(res)

    except GetoptError as e:
        print('Err: '+e.msg,
              'Use -h(--help) for help',
              sep='\n', file=sys.stderr)
    except KeyboardInterrupt:
        print('Canceled', file=sys.stderr)


if __name__=='__main__':
    main()

# vim: ts=4 sw=4 et
